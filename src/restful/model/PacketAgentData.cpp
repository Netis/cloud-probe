/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

//#include <iostream>
#include "PacketAgentData.h"

namespace io {
    namespace swagger {
        namespace server {
            namespace model {

                PacketAgentData::PacketAgentData() {
                    m_InterfaceNamesIsSet = false;
                  	m_InstanceNamesIsSet = false;
                    m_Bpf = "";
                    m_BpfIsSet = false;
                    m_ServiceTag = 0;
                    m_ServiceTagIsSet = false;
                    m_HasServiceTag = false;
                    m_HasServiceTagIsSet = false;
                    m_ReqPattern = "";
                    m_ReqPatternIsSet = false;
                    m_ReqPatternType = "";
                    m_ReqPatternTypeIsSet = false;
                    m_Startup = "";
                    m_StartupIsSet = false;
                    m_ContainerIdsIsSet = false;
                    m_ApplicationName = "";
                    m_ApplicationNameIsSet = false;
                    m_ClusterName = "";
                    m_ClusterNameIsSet = false;
                    m_PacketChannelTypeIsSet = false;
                    m_PacketChannelKey = 0;
                    m_PacketChannelKeyIsSet = true;
                    
                    m_BuffLimit = 0;
                    m_BuffLimitIsSet = false;                  
                    m_SliceLen = 0;
                    m_SliceLenIsSet = false;
                    m_Address = "";
                    m_AddressIsSet = false;
                    m_Port = 0;
                    m_PortIsSet = false;
                    std::string m_DumpDir = "";
                    m_DumpDirIsSet = false;
                    m_DumpInterval = 60;
                    m_DumpIntervalIsSet = false;
                    m_ForwardRateLimit = 0;
                    m_ForwardRateLimitIsSet = false;

                    m_ApiVersion = "v1";
                    m_ApiVersionIsSet = false;
                    
                    m_ObservationDomainIdsIsSet = false;
                    m_ExtensionFlag = 0;
                    m_ExtensionFlagIsSet = false;
                    
                    m_ObservationPointIdsIsSet = false;
                }

                PacketAgentData::~PacketAgentData() {
                }

                void PacketAgentData::validate() {
                    // TODO: implement validation
                }

                nlohmann::json PacketAgentData::toJson() const {
                    nlohmann::json val = nlohmann::json::object();

                    {
                        nlohmann::json jsonArray;
                        for (auto& item : m_InterfaceNames) {
                            jsonArray.push_back(ModelBase::toJson(item));
                        }

                        if (jsonArray.size() > 0) {
                            val["interfaceNames"] = jsonArray;
                        }
                    }
                    if (m_BpfIsSet) {
                        val["bpf"] = ModelBase::toJson(m_Bpf);
                    }
                    if (m_StartupIsSet) {
                        val["startup"] = ModelBase::toJson(m_Startup);
                    }
                    {
                        nlohmann::json jsonArray;
                        for (auto& item : m_ContainerIds) {
                            jsonArray.push_back(ModelBase::toJson(item));
                        }

                        if (jsonArray.size() > 0) {
                            val["containerIds"] = jsonArray;
                        }
                    }
                    if (m_ApplicationNameIsSet) {
                        val["applicationName"] = ModelBase::toJson(m_ApplicationName);
                    }
                    if (m_ClusterNameIsSet) {
                        val["clusterName"] = ModelBase::toJson(m_ClusterName);
                    }
                    if (m_SliceLenIsSet) {
                        val["sliceLen"] = ModelBase::toJson(m_SliceLen);
                    }
                    if (m_PacketChannelTypeIsSet) {
                        val["packetChannelType"] = ModelBase::toJson(m_PacketChannelType);
                    }
                    if (m_PacketChannelKeyIsSet) {
                        val["packetChannelKey"] = m_PacketChannelKey;
                    }
                    if(m_BuffLimitIsSet)
                    {
                        val["buffLimit"] = m_BuffLimit;
                    }
                    if (m_ServiceTagIsSet)
                    {
                        val["serviceTag"] = m_ServiceTag;
                    }
                    if (m_HasServiceTagIsSet)
                    {
                        val["hasServiceTag"] = m_HasServiceTag;
                    }
                    if (m_ReqPatternIsSet)
                    {
                        val["reqPattern"] = m_ReqPattern;
                    }
                    if (m_ReqPatternTypeIsSet)
                    {
                        val["reqPatternType"] = m_ReqPatternType;
                    }
                    if (m_SliceLenIsSet) 
                    {
                        val["sliceLen"] = m_SliceLen;
                    }
                    if(m_AddressIsSet)
                    {
                        val["address"] = ModelBase::toJson(m_Address);
                    }
                    if(m_PortIsSet)
                    {
                        val["port"] = m_Port;
                    }
                    
                    if(m_DumpDirIsSet)
                    {
                        val["dumpDir"] = ModelBase::toJson(m_DumpDir);
                    }
                    if(m_DumpIntervalIsSet)
                    {
                        val["dumpInterval"] = m_DumpInterval;
                    }
                    if(m_ForwardRateLimitIsSet)
                    {
                        val["forwardRateLimit"] = m_ForwardRateLimit;
                    }

                    if(m_ApiVersionIsSet)
                    {
                        val["apiVersion"] = ModelBase::toJson(m_ApiVersion);
                    }

                    {
                        nlohmann::json jsonArray;
                        for (auto& item : m_ObservationDomainIds) {
                            jsonArray.push_back(item);
                        }

                        if (jsonArray.size() > 0) {
                            val["observationDomainIds"] = jsonArray;
                        }
                    }

                    if(m_ExtensionFlagIsSet)
                    {
                        val["extensionFlag"] = m_ExtensionFlag;
                    }

                    {
                        nlohmann::json jsonArray;
                        for (auto& item : m_ObservationPointIds) {
                            jsonArray.push_back(item);
                        }

                        if (jsonArray.size() > 0) {
                            val["observationPointIds"] = jsonArray;
                        }
                    }

                    return val;
                }

                void PacketAgentData::fromJson(nlohmann::json& val) {

                    {
                        m_InterfaceNames.clear();
                        nlohmann::json jsonArray;
                        MB_FCHECK(interfaceNames){
                            for (auto& item : val["interfaceNames"]) {
                                std::string interface(item);
                                if (interface.length() == 0) {
                                    continue;
                                }
                              	//std::cout<<"get interface="<<interface<<std::endl;
                                m_InterfaceNames.push_back(interface);
                            }

                            if (m_InterfaceNames.size() > 0)
                                m_InterfaceNamesIsSet = true;
                        }
                    }

                    {
                        m_InstanceNames.clear();
                        nlohmann::json jsonArray;
                        MB_FCHECK(instanceNames){
                            for (auto& item : val["instanceNames"]) {
                                std::string instance(item);
                                if (instance.length() == 0) {
                                    continue;
                                }
                                //std::cout<<"get instance="<<instance<<std::endl;
                                m_InstanceNames.push_back(instance);
                            }

                            if (m_InstanceNames.size() > 0)
                                m_InstanceNamesIsSet = true;
                        }
                    }

                    {
                        m_ContainerIds.clear();
                        nlohmann::json jsonArray;
                        MB_FCHECK(containerIds){
                            for (auto& item : val["containerIds"]) {
                                std::string container(item);
                                if (container.length() == 0) {
                                    continue;
                                }
                              	//std::cout<<"get container="<<container<<std::endl;
                                m_ContainerIds.push_back(container);
                            }

                            if (m_ContainerIds.size() > 0)
                                m_ContainerIdsIsSet = true;
                        }
                    }

                    MB_FSET(bpf, Bpf)
                    MB_FSET(serviceTag, ServiceTag)
                    MB_FSET(hasServiceTag, HasServiceTag)
                    MB_FSET(reqPattern, ReqPattern)
                    MB_FSET(reqPatternType, ReqPatternType)
                    MB_FSET(startup, Startup)
                    MB_FSET(applicationName, ApplicationName)
                    MB_FSET(clusterName, ClusterName)
                    MB_FSET(packetChannelType, PacketChannelType)
                    MB_FSET(packetChannelKey, PacketChannelKey)
                    MB_FSET(sliceLen, SliceLen)

                    MB_FSET(buffLimit, BuffLimit)
                    MB_FSET(address, Address)
                    MB_FSET(port, Port)
                    MB_FSET(dumpDir, DumpDir)
                    MB_FSET(dumpInterval, DumpInterval)
                    MB_FSET(forwardRateLimit, ForwardRateLimit)

                    MB_FSET(apiVersion, ApiVersion)
                    {
                        m_ObservationDomainIds.clear();
                        nlohmann::json jsonArray;
                        MB_FCHECK(observationDomainIds){
                            for (auto& item : val["observationDomainIds"]) {
                                uint32_t observationDomainId(item);
                              	//std::cout<<"get container="<<container<<std::endl;
                                m_ObservationDomainIds.push_back(observationDomainId);
                            }

                            if (m_ObservationDomainIds.size() > 0)
                                m_ObservationDomainIdsIsSet = true;
                        }
                    }
                    MB_FSET(extensionFlag, ExtensionFlag)
                    {
                        m_ObservationPointIds.clear();
                        nlohmann::json jsonArray;
                        MB_FCHECK(observationPointIds){
                            for (auto& item : val["observationPointIds"]) {
                                uint8_t observationPointId(item);       
                              	//std::cout<<"get container="<<container<<std::endl;
                                m_ObservationPointIds.push_back(observationPointId);
                            }

                            if (m_ObservationPointIds.size() > 0)
                                m_ObservationPointIdsIsSet = true;
                        }
                    }

                }

                std::vector<std::string> PacketAgentData::getInterfaceNames() const {
                    return m_InterfaceNames;
                }

                void PacketAgentData::setInterfaceNames(std::string value) {
                    m_InterfaceNames.push_back(value);
                    m_InterfaceNamesIsSet = true;
                }

                bool PacketAgentData::interfaceNamesIsSet() const {
                    return m_InterfaceNamesIsSet;
                }

                void PacketAgentData::unsetInterfaceNames() {
                    m_InterfaceNamesIsSet = false;
                }

                std::vector<std::string> PacketAgentData::getInstanceNames() const {
                    return m_InstanceNames;
                }

                void PacketAgentData::setInstanceNames(std::string value) {
                    m_InstanceNames.push_back(value);
                    m_InstanceNamesIsSet = true;
                }

                bool PacketAgentData::instanceNamesIsSet() const {
                    return m_InstanceNamesIsSet;
                }

                void PacketAgentData::unsetInstanceNames() {
                    m_InstanceNamesIsSet = false;
                }

                std::vector<std::string> PacketAgentData::getContainerIds() const {
                    return m_ContainerIds;
                }

                void PacketAgentData::setContainerIds(std::string value) {
                    m_ContainerIds.push_back(value);
                    m_ContainerIdsIsSet = true;
                }

                bool PacketAgentData::containerIdsIsSet() const {
                    return m_ContainerIdsIsSet;
                }

                void PacketAgentData::unsetContainerIds() {
                    m_ContainerIdsIsSet = false;
                }


                std::string PacketAgentData::getBpf() const {
                    return m_Bpf;
                }

                void PacketAgentData::setBpf(std::string value) {
                    m_Bpf = value;
                    m_BpfIsSet = true;
                }

                bool PacketAgentData::bpfIsSet() const {
                    return m_BpfIsSet;
                }

                void PacketAgentData::unsetBpf() {
                    m_BpfIsSet = false;
                }

                int32_t PacketAgentData::getSliceLen() const {
                    return m_SliceLen;
                }

                void PacketAgentData::setSliceLen(int32_t value) {
                    m_SliceLen = value;
                    m_SliceLenIsSet = true;
                }

                bool PacketAgentData::sliceLenIsSet() const {
                    return m_SliceLenIsSet;
                }

                void PacketAgentData::unsetSliceLen() {
                    m_SliceLenIsSet = false;
                }

                

                std::string PacketAgentData::getPacketChannelType() const {
                    return m_PacketChannelType;
                }

                void PacketAgentData::setPacketChannelType(std::string value) {
                    m_PacketChannelType = value;
                    m_PacketChannelTypeIsSet = true;
                }

                bool PacketAgentData::packetChannelTypeIsSet() const {
                    return m_PacketChannelTypeIsSet;
                }

                void PacketAgentData::unsetPacketChannelType() {
                    m_PacketChannelTypeIsSet = false;
                }

                int32_t PacketAgentData::getPacketChannelKey() const {
                    return m_PacketChannelKey;
                }

                void PacketAgentData::setPacketChannelKey(int32_t value) {
                    m_PacketChannelKey = value;
                    m_PacketChannelKeyIsSet = true;
                }

                bool PacketAgentData::packetChannelKeyIsSet() const {
                    return m_PacketChannelKeyIsSet;
                }

                void PacketAgentData::unsetPacketChannelKey() {
                    m_PacketChannelKeyIsSet = false;
                }

                std::string PacketAgentData::getAddress() const
                {
                    return m_Address;
                }
                void PacketAgentData::setAddress(std::string value)
                {
                    m_Address = value;
                    m_AddressIsSet = true;
                }
                bool PacketAgentData::addressIsSet() const
                {
                    return m_AddressIsSet;
                }
                void PacketAgentData::unsetAddress()
                {
                    m_AddressIsSet = false;
                }
                int32_t PacketAgentData::getPort() const
                {
                    return m_Port;
                }
                void PacketAgentData::setPort(int32_t value)
                {
                    m_Port = value;
                    m_PortIsSet = true;
                }
                bool PacketAgentData::portIsSet() const
                {
                    return m_PortIsSet;
                }
                void PacketAgentData::unsetPort()
                {
                    m_PortIsSet = false;
                }

                std::string PacketAgentData::getDumpDir() const
                {
                    return m_DumpDir;
                }
                void PacketAgentData::setDumpDir(std::string value)
                {
                    m_DumpDir = value;
                    m_DumpDirIsSet = true;
                }
                bool PacketAgentData::dumpDirIsSet() const
                {
                    return m_DumpDirIsSet;
                }
                void PacketAgentData::unsetDumpDir()
                {
                    m_DumpDirIsSet = false;
                }

                int32_t PacketAgentData::getDumpInterval() const
                {
                    return m_DumpInterval;
                }
                void PacketAgentData::setDumpInterval(int32_t value)
                {
                    m_DumpInterval = value;
                    m_DumpIntervalIsSet = true;
                }
                bool PacketAgentData::dumpIntervalIsSet() const
                {
                    return m_DumpIntervalIsSet;
                }
                void PacketAgentData::unsetDumpInterval()
                {
                    m_DumpIntervalIsSet = false;
                }


                int64_t PacketAgentData::getBuffLimit() const {
                    return m_BuffLimit;
                }

                void PacketAgentData::setBuffLimit(int64_t value) {
                    m_BuffLimit = value;
                    m_BuffLimitIsSet = true;
                }

                bool PacketAgentData::buffLimitIsSet() const {
                    return m_BuffLimitIsSet;
                }

                void PacketAgentData::unsetBuffLimit() {
                    m_BuffLimitIsSet = false;
                }

                int32_t PacketAgentData::getForwardRateLimit() const {
                    return m_ForwardRateLimit;
                }

                void PacketAgentData::setForwardRateLimit(int32_t value) {
                    m_ForwardRateLimit = value;
                    m_ForwardRateLimitIsSet = true;
                }

                bool PacketAgentData::forwardRateLimitIsSet() const {
                    return m_ForwardRateLimitIsSet;
                }

                void PacketAgentData::unsetForwardRateLimit() {
                    m_ForwardRateLimitIsSet = false;
                }

                std::string PacketAgentData::getApiVersion() const {
                    return m_ApiVersion;
                }

                void PacketAgentData::setApiVersion(std::string value) {
                    m_ApiVersion = value;
                    m_ApiVersionIsSet = true;
                }

                bool PacketAgentData::apiVersionIsSet() const {
                    return m_ApiVersionIsSet;
                }

                void PacketAgentData::unsetApiVersion() {
                    m_ApiVersionIsSet = false;
                }

                std::vector<uint32_t> PacketAgentData::getObservationDomainIds() const {
                    return m_ObservationDomainIds;
                }

                void PacketAgentData::setObservationDomainId(int32_t value) {
                    m_ObservationDomainIds.push_back(value);
                    m_ObservationDomainIdsIsSet = true;
                }

                bool PacketAgentData::observationDomainIdsIsSet() const {
                    return m_ObservationDomainIdsIsSet;
                }

                void PacketAgentData::unsetObservationDomainIds() {
                    m_ObservationDomainIdsIsSet = false;
                }

                int8_t PacketAgentData::getExtensionFlag() const {
                    return m_ExtensionFlag;
                }

                void PacketAgentData::setExtensionFlag(int8_t value) {
                    m_ExtensionFlag = value;
                    m_ExtensionFlagIsSet = true;
                }

                bool PacketAgentData::extensionFlagIsSet() const {
                    return m_ExtensionFlagIsSet;
                }

                void PacketAgentData::unsetExtensionFlag() {
                    m_ExtensionFlagIsSet = false;
                }

                std::vector<uint8_t> PacketAgentData::getObservationPointIds() const {
                    return m_ObservationPointIds;
                }

                void PacketAgentData::setObservationPointId(int8_t value) {
                    m_ObservationPointIds.push_back(value);
                    m_ObservationPointIdsIsSet = true;
                }

                bool PacketAgentData::observationPointIdsIsSet() const {
                    return m_ObservationPointIdsIsSet;
                }

                void PacketAgentData::unsetObservationPointIds() {
                    m_ObservationPointIdsIsSet = false;
                }
            }
        }
    }
}

