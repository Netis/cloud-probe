/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketChannelMetrics.h"

namespace io {
    namespace swagger {
        namespace server {
            namespace model {

                PacketAgentMetrics::PacketAgentMetrics() {
                    m_SamplingTimestamp = 0;
                    m_SamplingMicroTimestamp = 0;
                    m_SamplingTimeIsSet = false;
                    m_CpuLoad = 0.0;
                    m_CpuLoadIsSet = false;
                    m_CpuLoadRate = 0.0;
                    m_CpuLoadRateIsSet = false;
                    m_MemUse = 0L;
                    m_MemUseIsSet = false;
                    m_MemUseRate = 0.0;
                    m_MemUseRateIsSet = false;
                    m_CapBytes = 0L;
                    m_CapBytesIsSet = false;
                    m_CapPackets = 0L;
                    m_CapPacketsIsSet = false;
                    m_CapDrop = 0L;
                    m_CapDropIsSet = false;
                    m_FwdBytes = 0L;
                    m_FwdBytesIsSet = false;
                    m_FwdPackets = 0L;
                    m_FwdPacketsIsSet = false;
                    m_StartTime = 0;
                    m_StartTimeIsSet = false;
                }

                PacketAgentMetrics::~PacketAgentMetrics() {
                }

                void PacketAgentMetrics::validate() {
                    // TODO: implement validation
                }

                nlohmann::json PacketAgentMetrics::toJson() const {
                    nlohmann::json val = nlohmann::json::object();

                    if (m_SamplingTimeIsSet) {
                        val["samplingTimestamp"] = m_SamplingTimestamp;
                        val["samplingMicroTimestamp"] = m_SamplingMicroTimestamp;
                    }

                    if (m_StartTime) {
                        val["startTime"] = m_StartTime;
                    }

                    if (m_CpuLoadIsSet) {
                        val["cpuLoad"] = m_CpuLoad;
                    }
                    if (m_CpuLoadRateIsSet) {
                        val["cpuLoadRate"] = m_CpuLoadRate;
                    }
                    if (m_MemUseIsSet) {
                        val["memUse"] = m_MemUse;
                    }
                    if (m_MemUseRateIsSet) {
                        val["memUseRate"] = m_MemUseRate;
                    }
                    if (m_CapBytesIsSet) {
                        val["capBytes"] = m_CapBytes;
                    }
                    if (m_CapPacketsIsSet) {
                        val["capPackets"] = m_CapPackets;
                    }
                    if (m_CapDropIsSet) {
                        val["capDrop"] = m_CapDrop;
                    }
                    if (m_FwdBytesIsSet) {
                        val["fwdBytes"] = m_FwdBytes;
                    }
                    if (m_FwdBytesIsSet) {
                        val["fwdPackets"] = m_FwdPackets;
                    }


                    return val;
                }

                void PacketAgentMetrics::fromJson(nlohmann::json& val) {
                    MB_FSET(samplingTimestamp, SamplingTimestamp)
                    MB_FSET(samplingMicroTimestamp, SamplingMicroTimestamp)
                    MB_FSET(startTime, StartTime)
                    MB_FSET(cpuLoad, CpuLoad)
                    MB_FSET(cpuLoadRate, CpuLoadRate)
                    MB_FSET(memUse, MemUse)
                    MB_FSET(memUseRate, MemUseRate)
                    MB_FSET(capBytes, CapBytes)
                    MB_FSET(capPackets, CapPackets)
                    MB_FSET(capDrop, CapDrop)
                    MB_FSET(fwdBytes, FwdBytes)
                    MB_FSET(fwdPackets, FwdPackets)
                }


                long PacketAgentMetrics::getSamplingTime() const {
                    return m_SamplingTimestamp;
                }

                void PacketAgentMetrics::setSamplingTime(struct timeval val) {
                    m_SamplingTimestamp = val.tv_sec;
                    m_SamplingMicroTimestamp = val.tv_usec;
                    m_SamplingTimeIsSet = true;
                }

                void PacketAgentMetrics::setSamplingTimestamp(long val) {
                    m_SamplingTimestamp = val;
                    m_SamplingTimeIsSet = true;
                }

                void PacketAgentMetrics::setSamplingMicroTimestamp(long val) {
                    m_SamplingMicroTimestamp = val;
                    m_SamplingTimeIsSet = true;
                }

                bool PacketAgentMetrics::samplingTimeIsSet() const {
                    return m_SamplingTimeIsSet;
                }

                void PacketAgentMetrics::unsetSamplingTime() {
                    m_SamplingTimeIsSet = false;
                }

                double PacketAgentMetrics::getCpuLoad() const {
                    return m_CpuLoad;
                }

                void PacketAgentMetrics::setCpuLoad(double value) {
                    m_CpuLoad = value;
                    m_CpuLoadIsSet = true;
                }

                bool PacketAgentMetrics::cpuLoadIsSet() const {
                    return m_CpuLoadIsSet;
                }

                void PacketAgentMetrics::unsetCpuLoad() {
                    m_CpuLoadIsSet = false;
                }

                double PacketAgentMetrics::getCpuLoadRate() const {
                    return m_CpuLoadRate;
                }

                void PacketAgentMetrics::setCpuLoadRate(double value) {
                    m_CpuLoadRate = value;
                    m_CpuLoadRateIsSet = true;
                }

                bool PacketAgentMetrics::cpuLoadRateIsSet() const {
                    return m_CpuLoadRateIsSet;
                }

                void PacketAgentMetrics::unsetCpuLoadRate() {
                    m_CpuLoadRateIsSet = false;
                }

                int64_t PacketAgentMetrics::getMemUse() const {
                    return m_MemUse;
                }

                void PacketAgentMetrics::setMemUse(int64_t value) {
                    m_MemUse = value;
                    m_MemUseIsSet = true;
                }

                bool PacketAgentMetrics::memUseIsSet() const {
                    return m_MemUseIsSet;
                }

                void PacketAgentMetrics::unsetMemUse() {
                    m_MemUseIsSet = false;
                }

                double PacketAgentMetrics::getMemUseRate() const {
                    return m_MemUseRate;
                }

                void PacketAgentMetrics::setMemUseRate(double value) {
                    m_MemUseRate = value;
                    m_MemUseRateIsSet = true;
                }

                bool PacketAgentMetrics::memUseRateIsSet() const {
                    return m_MemUseRateIsSet;
                }

                void PacketAgentMetrics::unsetMemUseRate() {
                    m_MemUseRateIsSet = false;
                }

                uint64_t PacketAgentMetrics::getCapBytes() const {
                    return m_CapBytes;
                }

                void PacketAgentMetrics::setCapBytes(uint64_t value) {
                    m_CapBytes = value;
                    m_CapBytesIsSet = true;
                }

                bool PacketAgentMetrics::capBytesIsSet() const {
                    return m_CapBytesIsSet;
                }

                void PacketAgentMetrics::unsetCapBytes() {
                    m_CapBytesIsSet = false;
                }

                uint64_t PacketAgentMetrics::getCapPackets() const {
                    return m_CapPackets;
                }

                void PacketAgentMetrics::setCapPackets(uint64_t value) {
                    m_CapPackets = value;
                    m_CapPacketsIsSet = true;
                }

                bool PacketAgentMetrics::capPacketsIsSet() const {
                    return m_CapPacketsIsSet;
                }

                void PacketAgentMetrics::unsetCapPackets() {
                    m_CapPacketsIsSet = false;
                }

                uint64_t PacketAgentMetrics::getCapDrop() const {
                    return m_CapDrop;
                }

                void PacketAgentMetrics::setCapDrop(uint64_t value) {
                    m_CapDrop = value;
                    m_CapDropIsSet = true;
                }

                bool PacketAgentMetrics::capDropIsSet() const {
                    return m_CapDropIsSet;
                }

                void PacketAgentMetrics::unsetCapDrop() {
                    m_CapDropIsSet = false;
                }

                uint64_t PacketAgentMetrics::getFwdBytes() const {
                    return m_FwdBytes;
                }

                void PacketAgentMetrics::setFwdBytes(uint64_t value) {
                    m_FwdBytes = value;
                    m_FwdBytesIsSet = true;
                }

                bool PacketAgentMetrics::fwdBytesIsSet() const {
                    return m_FwdBytesIsSet;
                }

                void PacketAgentMetrics::unsetFwdBytes() {
                    m_FwdBytesIsSet = false;
                }

                uint64_t PacketAgentMetrics::getFwdPackets() const {
                    return m_FwdPackets;
                }

                void PacketAgentMetrics::setFwdPackets(uint64_t value) {
                    m_FwdPackets = value;
                    m_FwdPacketsIsSet = true;
                }

                bool PacketAgentMetrics::fwdPacketsIsSet() const {
                    return m_FwdPacketsIsSet;
                }

                void PacketAgentMetrics::unsetFwdPackets() {
                    m_FwdPacketsIsSet = false;
                }

            }
        }
    }
}

