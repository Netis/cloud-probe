/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * Agent.h
 *
 * Agent 资源
 */

#ifndef Agent_H_
#define Agent_H_

#include <string>
#include <boost/date_time/posix_time/posix_time.hpp>

#include "ModelBase.h"
#include "PacketAgentLogs.h"
#include "PacketAgentData.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// Agent 资源
/// </summary>
class  Agent
    : public ModelBase
{
public:
    Agent();
    virtual ~Agent();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Agent members

    /// <summary>
    /// Agent 的 ID, 由 Daemon 负责和管理生成
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    void setPid(int32_t value);
    bool pidIsSet() const;
    void unsetPid();
    /// <summary>
    /// Agent 的名称，允许重复，由 Daemon 负责生成
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
    bool nameIsSet() const;
    void unsetName();
    /// 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Agent 启动时间，由 Daemon 负责生成
    /// </summary>
    long getStartTime() const;
    void setStartTime(struct timeval value);
    void setStartTimestamp (long val);
    void setStartMicroTimestamp (long val);
    bool startTimeIsSet() const;
    void unsetStartTime();
   
    /// <summary>

    double getCpuLimit() const;

    void setCpuLimit(double value);

    bool cpuLimitIsSet() const;

    void unsetCpuLimit();

    int64_t getMemLimit() const;

    void setMemLimit(int64_t value);

    bool memLimitIsSet() const;

    void unsetMemLimit();
 
    /// </summary>
    std::vector<std::shared_ptr<PacketAgentData>> getPacketAgentStrategies() const;
    bool packetAgentStrategiesIsSet() const;
    void unsetPacketAgentStrategies();

    int32_t getVersion() const;
    void setVersion(int32_t value);
    bool versionIsSet() const;
    void unsetVersion();

    int32_t getSyncInterval() const { return m_SyncInterval; }
    void setSyncInterval(int32_t value) { m_SyncInterval = value; m_SyncIntervalIsSet = true;}
    bool SyncIntervalIsSet() const { return m_SyncIntervalIsSet; }
    void unsetSyncInterval() { m_SyncIntervalIsSet = false; }

protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Pid;
    bool m_PidIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    long m_StartTimestamp;
    long m_StartMicroTimestamp;
    bool m_StartTimeIsSet;
    std::vector<std::shared_ptr<PacketAgentData>> m_Strategy;
    bool m_StrategyIsSet;
    double m_CpuLimit;
    bool m_CpuLimitIsSet;
    int64_t m_MemLimit;
    bool m_MemLimitIsSet;
    int32_t m_Version;
    bool m_VersionIsSet;
    int32_t m_SyncInterval;
    bool m_SyncIntervalIsSet;
};

}
}
}
}

#endif /* Agent_H_ */
