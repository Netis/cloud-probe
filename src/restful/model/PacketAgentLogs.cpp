/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketAgentLogs.h"

namespace io {
    namespace swagger {
        namespace server {
            namespace model {

                PacketAgentLogs::PacketAgentLogs() {
                    m_LogTimestamp = 0;
                    m_LogMicroTimestamp = 0;
                    m_LogTimeIsSet = true;
                    m_LogLevel = "";
                    m_LogLevelIsSet = true;
                    m_LogDetails = "";
                    m_LogDetailsIsSet = true;
                }

                PacketAgentLogs::~PacketAgentLogs() {
                }

                void PacketAgentLogs::validate() {
                    // TODO: implement validation
                }

                nlohmann::json PacketAgentLogs::toJson() const {
                    nlohmann::json val = nlohmann::json::object();

                    if (m_LogTimeIsSet) {
                        val["logTimestamp"] = m_LogTimestamp;
                        val["logMicroTimestamp"] = m_LogMicroTimestamp;
                    }
                    if (m_LogLevelIsSet) {
                        val["logLevel"] = m_LogLevel;
                    }
                    if (m_LogDetailsIsSet) {
                        val["logDetails"] = m_LogDetails;
                    }
                    return val;
                }

                void PacketAgentLogs::fromJson(nlohmann::json& val) {
                    MB_FSET(logTimestamp, LogTimestamp)
                    MB_FSET(logMicroTimestamp, LogMicroTimestamp)
                    MB_FSET(logLevel, LogLevel)
                    MB_FSET(logDetails, LogDetails)
                }


                long PacketAgentLogs::getLogTime() const {
                    return m_LogTimestamp;
                }

                void PacketAgentLogs::setLogTime(struct timeval val) {
                    m_LogTimestamp = val.tv_sec;
                    m_LogMicroTimestamp = val.tv_usec;
                    m_LogTimeIsSet = true;
                }

                void PacketAgentLogs::setLogTimestamp(long val) {
                    m_LogTimestamp = val;
                    m_LogTimeIsSet = true;
                }
                void PacketAgentLogs::setLogMicroTimestamp(long val) {
                    m_LogMicroTimestamp = val;
                    m_LogTimeIsSet = true;
                }


                bool PacketAgentLogs::logTimeIsSet() const {
                    return m_LogTimeIsSet;
                }

                void PacketAgentLogs::unsetLogTime() {
                    m_LogTimeIsSet = false;
                }

                std::string PacketAgentLogs::getLogLevel() const {
                    return m_LogLevel;
                }

                void PacketAgentLogs::setLogLevel(std::string value) {
                    m_LogLevel = value;
                    m_LogLevelIsSet = true;
                }

                bool PacketAgentLogs::logLevelIsSet() const {
                    return m_LogLevelIsSet;
                }

                void PacketAgentLogs::unsetLogLevel() {
                    m_LogLevelIsSet = false;
                }

                std::string PacketAgentLogs::getLogDetails() const {
                    return m_LogDetails;
                }

                void PacketAgentLogs::setLogDetails(std::string value) {
                    m_LogDetails = value;
                    m_LogDetailsIsSet = true;
                }

                bool PacketAgentLogs::logDetailsIsSet() const {
                    return m_LogDetailsIsSet;
                }

                void PacketAgentLogs::unsetLogDetails() {
                    m_LogDetailsIsSet = false;
                }
            }
        }
    }
}

