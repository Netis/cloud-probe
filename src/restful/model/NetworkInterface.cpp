/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "NetworkInterface.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

NetworkInterface::NetworkInterface()
{
    m_Index = 0;
    m_IndexIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Flags = 0;
    m_FlagsIsSet = false;
    m_InetAddressesIsSet = false;
    m_Mac = "";
    m_MacIsSet = false;
    m_Mtu = 0;
    m_MtuIsSet = false;
    
}

NetworkInterface::~NetworkInterface()
{
}

void NetworkInterface::validate()
{
    // TODO: implement validation
}

nlohmann::json NetworkInterface::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IndexIsSet)
    {
        val["index"] = m_Index;
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_FlagsIsSet)
    {
        val["flags"] = m_Flags;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_InetAddresses )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["inetAddresses"] = jsonArray;
        }
    }
    if(m_MacIsSet)
    {
        val["mac"] = ModelBase::toJson(m_Mac);
    }
    if(m_MtuIsSet)
    {
        val["mtu"] = m_Mtu;
    }
    

    return val;
}

void NetworkInterface::fromJson(nlohmann::json& val)
{
    MB_FSET(index, Index)
    MB_FSET(name, Name)
    MB_FSET(flags, Flags)

    {
        m_InetAddresses.clear();
        nlohmann::json jsonArray;
        MB_FCHECK(inetAddresses)
        {
            for( auto& item : val["inetAddresses"] )
            {
                m_InetAddresses.push_back(item);
            }
        }
    }
    MB_FSET(mac, Mac)
    MB_FSET(mtu, Mtu)
}


int32_t NetworkInterface::getIndex() const
{
    return m_Index;
}
void NetworkInterface::setIndex(int32_t value)
{
    m_Index = value;
    m_IndexIsSet = true;
}
bool NetworkInterface::indexIsSet() const
{
    return m_IndexIsSet;
}
void NetworkInterface::unsetIndex()
{
    m_IndexIsSet = false;
}
std::string NetworkInterface::getName() const
{
    return m_Name;
}
void NetworkInterface::setName(std::string value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool NetworkInterface::nameIsSet() const
{
    return m_NameIsSet;
}
void NetworkInterface::unsetName()
{
    m_NameIsSet = false;
}
int32_t NetworkInterface::getFlags() const
{
    return m_Flags;
}
void NetworkInterface::setFlags(int32_t value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}
bool NetworkInterface::flagsIsSet() const
{
    return m_FlagsIsSet;
}
void NetworkInterface::unsetFlags()
{
    m_FlagsIsSet = false;
}
std::vector<std::string>& NetworkInterface::getInetAddresses()
{
    return m_InetAddresses;
}
bool NetworkInterface::inetAddressesIsSet() const
{
    return m_InetAddressesIsSet;
}
void NetworkInterface::unsetInetAddresses()
{
    m_InetAddressesIsSet = false;
}
std::string NetworkInterface::getMac() const
{
    return m_Mac;
}
void NetworkInterface::setMac(std::string value)
{
    m_Mac = value;
    m_MacIsSet = true;
}
bool NetworkInterface::macIsSet() const
{
    return m_MacIsSet;
}
void NetworkInterface::unsetMac()
{
    m_MacIsSet = false;
}
int32_t NetworkInterface::getMtu() const
{
    return m_Mtu;
}
void NetworkInterface::setMtu(int32_t value)
{
    m_Mtu = value;
    m_MtuIsSet = true;
}
bool NetworkInterface::mtuIsSet() const
{
    return m_MtuIsSet;
}
void NetworkInterface::unsetMtu()
{
    m_MtuIsSet = false;
}

}
}
}
}

