/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketAgentData.h
 *
 * Packet Agent 的属性
 */

#ifndef PacketAgentData_H_
#define PacketAgentData_H_


#include "ModelBase.h"

#include <string>
#include "PacketChannelMetrics.h"

namespace io {
    namespace swagger {
        namespace server {
            namespace model {

/// <summary>
/// Packet Agent 的属性
/// </summary>
                class PacketAgentData
                        : public ModelBase {
                public:
                    PacketAgentData();

                    virtual ~PacketAgentData();

                    /////////////////////////////////////////////
                    /// ModelBase overrides

                    void validate() override;

                    nlohmann::json toJson() const override;

                    void fromJson(nlohmann::json& json) override;

                    /////////////////////////////////////////////
                    /// PacketAgentData members

                    /// <summary>
                    ///
                    /// </summary>

                    /// <summary>
                    /// 符合 BPF(Berkeley Packet Filter) 标准的数据包过滤表达式, 缺省采集所有数据包
                    /// </summary>
                    std::string getBpf() const;

                    void setBpf(std::string value);

                    bool bpfIsSet() const;

                    void unsetBpf();

                    /// <summary>
                    /// 将收到的包裁切为指定长度转发
                    /// </summary>
                    int32_t getSliceLen() const;

                    void setSliceLen(int32_t value);

                    bool sliceLenIsSet() const;

                    void unsetSliceLen();

                    //

                    int32_t getServiceTag() const{ return m_ServiceTag; }
                    void setServiceTag(int32_t value){ m_ServiceTag = value; m_ServiceTagIsSet = true;}
                    bool serviceTagIsSet() const{ return m_ServiceTagIsSet;}
                    void unsetServiceTag(){ m_ServiceTagIsSet = false; }

                    bool getHasServiceTag() const{ return m_HasServiceTag; }
                    void setHasServiceTag(bool value){ m_HasServiceTag = value; m_HasServiceTagIsSet = true;}
                    bool hasServiceTagIsSet() const{ return m_HasServiceTagIsSet;}
                    void unsetHasServiceTag(){ m_HasServiceTagIsSet = false; }

                    std::string getReqPattern() const{ return m_ReqPattern; }
                    void setReqPattern(std::string value){ m_ReqPattern = value; m_ReqPatternIsSet = true;}
                    bool reqPatternIsSet() const{ return m_ReqPatternIsSet;}
                    void unsetReqPattern(){ m_ReqPatternIsSet = false; }

                    std::string getReqPatternType() const{ return m_ReqPatternType; }
                    void setReqPatternType(std::string value){ m_ReqPatternType = value; m_ReqPatternTypeIsSet = true;}
                    bool reqPatternTypeIsSet() const{ return m_ReqPatternTypeIsSet;}
                    void unsetReqPatternType(){ m_ReqPatternTypeIsSet = false; }

                    std::string getStartup() const{ return m_Startup; }
                    void setStartup(std::string value){ m_Startup = value; m_StartupIsSet = true;}
                    bool startupIsSet() const{ return m_StartupIsSet;}
                    void unsetStartup(){ m_StartupIsSet = false; }

                    std::vector<std::string> getInterfaceNames() const;

                    void setInterfaceNames(std::string value);

                    bool interfaceNamesIsSet() const;

                    void unsetInterfaceNames();

                    std::vector<std::string> getInstanceNames() const;

                    void setInstanceNames(std::string value);

                    bool instanceNamesIsSet() const;

                    void unsetInstanceNames();

                    std::vector<std::string> getContainerIds() const;

                    void setContainerIds(std::string value);

                    bool containerIdsIsSet() const;

                    void unsetContainerIds();

                    std::string getApplicationName() const{ return m_ApplicationName; }
                    void setApplicationName(std::string value){ m_ApplicationName = value; m_ApplicationNameIsSet = true;}
                    bool applicationNameIsSet() const{ return m_ApplicationNameIsSet;}
                    void unsetApplicationName(){ m_ApplicationNameIsSet = false; }

                    std::string getClusterName() const{ return m_ClusterName; }
                    void setClusterName(std::string value){ m_ClusterName = value; m_ClusterNameIsSet = true;}
                    bool clusterNameIsSet() const{ return m_ClusterNameIsSet;}
                    void unsetClusterName(){ m_ClusterNameIsSet = false; }

                    /// <summary>
                    ///
                    /// </summary>
                    std::string getPacketChannelType() const;

                    void setPacketChannelType(std::string value);

                    bool packetChannelTypeIsSet() const;

                    void unsetPacketChannelType();

                    /// <summary>
                    /// Packet 通道标签, 取值范围 [0, 65535]
                    /// </summary>
                    int32_t getPacketChannelKey() const;

                    void setPacketChannelKey(int32_t value);

                    bool packetChannelKeyIsSet() const;

                    void unsetPacketChannelKey();

                    /// <summary>
                    ///
                    /// </summary>

                    int64_t getBuffLimit() const;

                    void setBuffLimit(int64_t value);

                    bool buffLimitIsSet() const;

                    void unsetBuffLimit();

                    std::string getAddress() const;
                    
                    void setAddress(std::string value);
    
                    bool addressIsSet() const;
    
                    void unsetAddress();
        
                    /// <summary>
                    /// ZMQ 接收端端口
                    /// </summary>
                    int32_t getPort() const;
                    
                    void setPort(int32_t value);
                    
                    bool portIsSet() const;
                    
                    void unsetPort();
                    
                    /// <summary>
                    /// pcap dump dir
                    /// </summary>
                    std::string getDumpDir() const;
    
                    void setDumpDir(std::string value);
            
                    bool dumpDirIsSet() const;
    
                    void unsetDumpDir();
                    
                    /// <summary>
                    /// pcap dump interval
                    /// </summary>
                    int32_t getDumpInterval() const;
    
                    void setDumpInterval(int32_t value);
    
                    bool dumpIntervalIsSet() const;
    
                    void unsetDumpInterval();

                    /// <summary>
                    /// forward rate limit
                    /// </summary>
                    int32_t getForwardRateLimit() const;
    
                    void setForwardRateLimit(int32_t value);
    
                    bool forwardRateLimitIsSet() const;
    
                    void unsetForwardRateLimit();

                    std::string getApiVersion() const;
    
                    void setApiVersion(std::string value);
            
                    bool apiVersionIsSet() const;
    
                    void unsetApiVersion();

                    std::vector<uint32_t> getObservationDomainIds() const;
    
                    void setObservationDomainId(int32_t value);
    
                    bool observationDomainIdsIsSet() const;
    
                    void unsetObservationDomainIds();

                    int8_t getExtensionFlag() const;
    
                    void setExtensionFlag(int8_t value);
    
                    bool extensionFlagIsSet() const;
    
                    void unsetExtensionFlag();

                    std::vector<uint8_t> getObservationPointIds() const;
    
                    void setObservationPointId(int8_t value);
    
                    bool observationPointIdsIsSet() const;
    
                    void unsetObservationPointIds();

                protected:
                    std::vector<std::string> m_InterfaceNames;
                    bool m_InterfaceNamesIsSet;
                    std::vector<std::string> m_ContainerIds;
                    bool m_ContainerIdsIsSet;
                    std::vector<std::string> m_InstanceNames;
                    bool m_InstanceNamesIsSet;
                    int32_t m_ServiceTag;
                    bool m_ServiceTagIsSet;
                    bool m_HasServiceTag;
                    bool m_HasServiceTagIsSet;
                    std::string m_ReqPattern;
                    bool m_ReqPatternIsSet;
                    std::string m_ReqPatternType;
                    bool m_ReqPatternTypeIsSet;
                    std::string m_Startup;
                    bool m_StartupIsSet;
                    std::string m_ApplicationName;
                    bool m_ApplicationNameIsSet;
                    std::string m_ClusterName;
                    bool m_ClusterNameIsSet;
                    std::string m_Bpf;
                    bool m_BpfIsSet;
                    std::string m_PacketChannelType;
                    bool m_PacketChannelTypeIsSet;
                    int32_t m_PacketChannelKey;
                    bool m_PacketChannelKeyIsSet;
                    int64_t m_BuffLimit;
                    bool m_BuffLimitIsSet;
                    int32_t m_SliceLen;
                    bool m_SliceLenIsSet;
                    std::string m_Address;
                    bool m_AddressIsSet;
                    int32_t m_Port;
                    bool m_PortIsSet;
                    std::string m_DumpDir;
                    bool m_DumpDirIsSet;
                    int32_t m_DumpInterval;
                    bool m_DumpIntervalIsSet;
                    int32_t m_ForwardRateLimit;
                    bool m_ForwardRateLimitIsSet;
                    std::string m_ApiVersion;
                    bool m_ApiVersionIsSet;
                    std::vector<uint32_t> m_ObservationDomainIds;
                    bool m_ObservationDomainIdsIsSet;
                    int8_t m_ExtensionFlag;
                    bool m_ExtensionFlagIsSet;
                    std::vector<uint8_t> m_ObservationPointIds;
                    bool m_ObservationPointIdsIsSet;
                };
            }
        }
    }
}

#endif /* PacketAgentData_H_ */
