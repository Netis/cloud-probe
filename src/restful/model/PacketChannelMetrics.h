/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * PacketAgentMetrics.h
 *
 * Packet 通道指标
 */

#ifndef PacketAgentMetrics_H_
#define PacketAgentMetrics_H_


#include "ModelBase.h"

#include <string>

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// Packet 通道指标
/// </summary>
class  PacketAgentMetrics
    : public ModelBase
{
public:
    PacketAgentMetrics();
    virtual ~PacketAgentMetrics();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// PacketAgentMetrics members

    /// <summary>
    /// Metrics 的采样时间
    /// </summary>
    long getSamplingTime() const;
    void setSamplingTime(struct timeval val);
    void setSamplingTimestamp(long val);
    void setSamplingMicroTimestamp(long val);
    bool samplingTimeIsSet() const;
    void unsetSamplingTime();
    long getStartTime() const {return m_StartTime;};
    void setStartTime(long val) {m_StartTime = val; m_SamplingTimeIsSet = true;};
    bool startTimeIsSet() const {return m_StartTimeIsSet;};
    void unsetStartTime() {m_SamplingTimeIsSet = false;};
    /// <summary>
    /// Packet Agent 当前 CPU 负载情况
    /// </summary>
    double getCpuLoad() const;
    void setCpuLoad(double value);
    bool cpuLoadIsSet() const;
    void unsetCpuLoad();
    /// <summary>
    /// Packet Agent 当前 CPU 资源占比
    /// </summary>
    double getCpuLoadRate() const;
    void setCpuLoadRate(double value);
    bool cpuLoadRateIsSet() const;
    void unsetCpuLoadRate();
    /// <summary>
    /// Packet Agent 当前内存使用量，单位字节
    /// </summary>
    int64_t getMemUse() const;
    void setMemUse(int64_t value);
    bool memUseIsSet() const;
    void unsetMemUse();
    /// <summary>
    /// Packet Agent 当前内存使用占比
    /// </summary>
    double getMemUseRate() const;
    void setMemUseRate(double value);
    bool memUseRateIsSet() const;
    void unsetMemUseRate();
    /// <summary>
    /// Packet Agent 从启动开始采集的总数字节数
    /// </summary>
    uint64_t getCapBytes() const;
    void setCapBytes(uint64_t value);
    bool capBytesIsSet() const;
    void unsetCapBytes();
    /// <summary>
    /// Packet Agent 从启动开始采集的总数据包数
    /// </summary>
    uint64_t getCapPackets() const;
    void setCapPackets(uint64_t value);
    bool capPacketsIsSet() const;
    void unsetCapPackets();
    /// <summary>
    /// Packet Agent 从启动开始采集过程中丢弃数据包数量
    /// </summary>
    uint64_t getCapDrop() const;
    void setCapDrop(uint64_t value);
    bool capDropIsSet() const;
    void unsetCapDrop();
    /// <summary>
    /// Packet Agent 从启动开始转发的字节数
    /// </summary>
    uint64_t getFwdBytes() const;
    void setFwdBytes(uint64_t value);
    bool fwdBytesIsSet() const;
    void unsetFwdBytes();
    /// <summary>
    /// Packet Agent 从启动开始转发的数据包数
    /// </summary>
    uint64_t getFwdPackets() const;
    void setFwdPackets(uint64_t value);
    bool fwdPacketsIsSet() const;
    void unsetFwdPackets();
    /// <summary>
    /// Packet Agent 从启动开始转发的数据包数
    /// </summary>
    uint64_t getCapBuff() const;
    void setCapBuff(uint64_t value);
    bool capBuffIsSet() const;
    void unsetCapBuff();
protected:
    long m_SamplingTimestamp;
    long m_SamplingMicroTimestamp;
    bool m_SamplingTimeIsSet;
    double m_CpuLoad;
    bool m_CpuLoadIsSet;
    double m_CpuLoadRate;
    bool m_CpuLoadRateIsSet;
    int64_t m_MemUse;
    bool m_MemUseIsSet;
    double m_MemUseRate;
    bool m_MemUseRateIsSet;
    uint64_t m_CapBytes;
    bool m_CapBytesIsSet;
    uint64_t m_CapPackets;
    bool m_CapPacketsIsSet;
    uint64_t m_CapDrop;
    bool m_CapDropIsSet;
    int64_t m_FwdBytes;
    bool m_FwdBytesIsSet;
    uint64_t m_FwdPackets;
    bool m_FwdPacketsIsSet;
    uint64_t m_CapBuff;
    bool m_CapBuffIsSet;
    long m_StartTime;
    bool m_StartTimeIsSet;
};

}
}
}
}

#endif /* PacketAgentMetrics_H_ */
