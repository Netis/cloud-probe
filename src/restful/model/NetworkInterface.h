/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * NetworkInterface.h
 *
 * 网卡资源
 */

#ifndef NetworkInterface_H_
#define NetworkInterface_H_


#include "ModelBase.h"

#include <string>
#include <vector>

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// 网卡资源
/// </summary>
class  NetworkInterface
    : public ModelBase
{
public:
    NetworkInterface();
    virtual ~NetworkInterface();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// NetworkInterface members

    /// <summary>
    /// 网卡的 Index，从 0 开始依次递增
    /// </summary>
    int32_t getIndex() const;
    void setIndex(int32_t value);
    bool indexIsSet() const;
    void unsetIndex();
    /// <summary>
    /// 网卡的显示名称
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 网卡的 flags
    /// </summary>
    int32_t getFlags() const;
    void setFlags(int32_t value);
    bool flagsIsSet() const;
    void unsetFlags();
    /// <summary>
    /// 网卡IP地址的字符表示，IPv4或者IPv6
    /// </summary>
    std::vector<std::string>& getInetAddresses();
    bool inetAddressesIsSet() const;
    void unsetInetAddresses();
    /// <summary>
    /// 网卡的 MAC 地址
    /// </summary>
    std::string getMac() const;
    void setMac(std::string value);
    bool macIsSet() const;
    void unsetMac();
    /// <summary>
    /// 网卡的 MTU
    /// </summary>
    int32_t getMtu() const;
    void setMtu(int32_t value);
    bool mtuIsSet() const;
    void unsetMtu();


protected:
    int32_t m_Index;
    bool m_IndexIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    int32_t m_Flags;
    bool m_FlagsIsSet;
    std::vector<std::string> m_InetAddresses;
    bool m_InetAddressesIsSet;
    std::string m_Mac;
    bool m_MacIsSet;
    int32_t m_Mtu;
    bool m_MtuIsSet;
};

}
}
}
}

#endif /* NetworkInterface_H_ */
