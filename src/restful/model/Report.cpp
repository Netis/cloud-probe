/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "Report.h"

namespace io {
    namespace swagger {
        namespace server {
            namespace model {

                Report::Report() {
                    m_LogsIsSet = false;
                    m_MetricsIsSet = false;
                    m_PidIsSet = false;
                }

                Report::~Report() {
                }

                void Report::validate() {
                    // TODO: implement validation
                }

                nlohmann::json Report::toJson() const {
                    nlohmann::json val = nlohmann::json::object();

                    {
                        nlohmann::json jsonArray;
                        for (auto& item : m_Logs) {
                            jsonArray.push_back(ModelBase::toJson(item));
                        }

                        if (jsonArray.size() > 0) {
                            val["logs"] = jsonArray;
                        }
                    }
                    if (m_MetricsIsSet) {
                        val["metrics"] = ModelBase::toJson(m_Metrics);
                    }

                    if (m_PidIsSet) {
                        val["pid"] = m_Pid;
                    }

                    return val;
                }

                void Report::fromJson(nlohmann::json& val) {

                    MB_FCHECK(packetAgentMetrics){
                        std::shared_ptr<PacketAgentMetrics> newItem(new PacketAgentMetrics());
                        newItem->fromJson(val["packetAgentMetrics"]);
                        setPacketAgentMetrics(newItem);
                    }
                }

               std::shared_ptr<PacketAgentMetrics> Report::getPacketAgentMetrics() const {
                    return m_Metrics;
                }

                void Report::setPacketAgentMetrics(std::shared_ptr<PacketAgentMetrics> value) {
                    m_Metrics = value;
                    m_MetricsIsSet = true;
                }

                bool Report::packetAgentMetricsIsSet() const {
                    return m_MetricsIsSet;
                }

                void Report::unsetPacketAgentMetrics() {
                    m_Metrics.reset();
                    m_MetricsIsSet = false;
                }

                void Report::addPacketAgentLogs(const std::string& level, const std::string& details)  {
                    struct timeval tv;
                    gettimeofday(&tv,NULL);
                    m_LogsIsSet = true;
                    std::shared_ptr<PacketAgentLogs> newLog (new PacketAgentLogs());
                    newLog->setLogTime (tv);
                    newLog->setLogLevel (level);
                    newLog->setLogDetails (details);

                    m_Logs.push_back(newLog);
                    return;
                }

                bool Report::packetAgentLogsIsSet() const {
                    return m_LogsIsSet;
                }

                void Report::unsetPacketAgentLogs() {
                    m_Logs.clear();
                    m_LogsIsSet = false;
                }

            }
        }
    }
}

