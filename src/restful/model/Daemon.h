/**
* Netis Agent REST APIs
* Netis Agent 管理平台由 **Agent**, **Daemon**, **Manager** 三个组件组成。   * Agent: 部署在用户环境中采集数据，当前支持 Packet Agent 采集网络数据   * Daemon: 部署在用户环境中通过 REST APIs 管理 Agent   * Manager: 部署在监控环境中通过 REST APIs 管理 Daemon 和 Agent 
*
* OpenAPI spec version: 0.1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * Daemon.h
 *
 * Daemon 资源
 */

#ifndef Daemon_H_
#define Daemon_H_


#include "ModelBase.h"

#include "NetworkInterface.h"
#include "Label.h"
#include <string>
#include "Agent.h"
#include <vector>

#include "logfilecontext.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// Daemon 资源
/// </summary>
class  Daemon
    : public ModelBase
{
public:
    Daemon();
    virtual ~Daemon();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Daemon members

    /// <summary>
    /// Manager 生成的 Daemon 节点 ID，用于查询
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();

    std::string getName() const;
    void setName(std::string value);
    bool nameIsSet() const;
    void unsetName();
    
    std::string getPodName() const;
    void setPodName(std::string value);
    bool podNameIsSet() const;
    void unsetPodName();
    
    std::string getNamespace() const;
    void setNamespace(std::string value);
    bool namespaceIsSet() const;
    void unsetNamespace();

    std::string getDeployEnv() const;
    void setDeployEnv(std::string value);
    bool deployEnvIsSet() const;
    void unsetDeployEnv();

    std::string getPlatformId() const;
    void setPlatformId(std::string value);
    bool platformIdIsSet() const;
    void unsetPlatformId();
    std::string getClientVersion() const;
    void setClientVersion(std::string value);
    bool clientVersionIsSet() const;
    void unsetClientVersion();
    std::string getNodeName() const;
    void setNodeName(std::string value);
    bool nodeNameIsSet() const;
    void unsetNodeName();
    
    std::string getUuid() const;
    void setUuid(std::string value);
    bool uuidIsSet() const;
    void unsetUuid();

    std::string getPaUUID() const;
    void setPaUUID(std::string value);
    bool paUUIDIsSet() const;
    void unsetPaUUID();

    std::string getRegisterRequestIpAddress() const;
    void setRegisterRequestIpAddress(std::string value);
    bool registerRequestIpAddressIsSet() const;
    void unsetRegisterRequestIpAddress();
    /// <summary>
    /// Daemon 服务的 URL 地址, 需要唯一
    /// </summary>
    std::string getService() const;
    void setService(std::string value);
    bool serviceIsSet() const;
    void unsetService();
    /// <summary>
    /// 
    /// </summary>
    std::string getApiVersion() const;
    void setApiVersion(std::string value);
    bool apiVersionIsSet() const;
    void unsetApiVersion();

    std::vector<std::string>& getSupportApiVersions(){ return m_SupportApiVersions; }
    bool supportApiVersionsIsSet() const { return m_SupportApiVersionsIsSet; }
    void unsetSupportApiVersions() { m_SupportApiVersionsIsSet = false; }
    /// <summary>
    /// 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Daemon 启动时间
    /// </summary>
    long getStartTime() const;
    void setStartTime(struct timeval val);
    void setStartTimestamp(long val);
    void setStartMicroTimestamp(long val);
    bool startTimeIsSet() const;
    void unsetStartTime();
    /// <summary>
    /// Daemon 所部署环境的网络接口信息
    /// </summary>
    std::vector<std::shared_ptr<NetworkInterface>> getNetworkInterfaces();
    bool networkInterfacesIsSet() const;
    void unsetNetworkInterfaces();
    /// <summary>
    /// Daemon 标签，用于标注 Daemon 属性，以便于 Manger 根据属性对 Daemon 进行调度
    /// </summary>
    std::vector<std::shared_ptr<Label>>& getLabels();
    bool labelsIsSet() const;
    void unsetLabels();
    /// <summary>
    /// 当前 Daemon 上正在运行的 Agent 信息
    /// </summary>
    std::string getSyncMode() const { return m_SyncMode; }
    void setSyncMode(std::string value) { m_SyncMode = value; m_SyncModeIsSet = true;}
    bool SyncModeIsSet() const { return m_SyncModeIsSet; }
    void unsetSyncMode() { m_SyncModeIsSet = false; }

    int filterNics(std::vector<std::string> & nicNames);

    void setLogFileContext(LogFileContext& ctx) {m_ctx = ctx;};
    int updateNics();

protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Namespace;
    bool m_NamespaceIsSet;
    std::string m_DeployEnv;
    bool m_DeployEnvIsSet;
    std::string m_PodName;
    bool m_PodNameIsSet;
    std::string m_NodeName;
    bool m_NodeNameIsSet;
    std::string m_Uuid;
    bool m_UuidIsSet;
    std::string m_PaUUID;
    bool m_PaUUIDIsSet;
    std::string m_RegisterRequestIpAddress;
    bool m_RegisterRequestIpAddressIsSet;
    std::string m_Service;
    bool m_ServiceIsSet;
    std::string m_ApiVersion;
    bool m_ApiVersionIsSet;
    std::vector<std::string> m_SupportApiVersions;
    bool m_SupportApiVersionsIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    long m_StartTimestamp;
    long m_StartMicroTimestamp;
    bool m_StartTimeIsSet;
    std::vector<std::shared_ptr<io::swagger::server::model::Label>> m_Labels;
    bool m_LabelsIsSet;
    std::string m_SyncMode;
    bool m_SyncModeIsSet;
    std::string m_PlatformId;
    bool m_PlatformIdIsSet;
    std::string m_ClientVersion;
    bool m_ClientVersionIsSet;
    std::vector<std::shared_ptr<NetworkInterface>> nics;

    LogFileContext m_ctx;


};

}
}
}
}

#endif /* Daemon_H_ */
